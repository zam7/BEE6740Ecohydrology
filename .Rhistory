# D/lambda to check slender body assumption
D = 0.0508
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
# Find u using u = a*k*Cp
W1_u = W1_a * W1_k * W1_Cp
W2_u = W2_a * W2_k * W2_Cp
W3_u = W3_a * W3_k * W3_Cp
W4_u = W4_a * W4_k * W4_Cp
# Find Reynolds number using Re = u*D/v
v = 1.003*10^-6
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
### 4. Find Cd and Cm for each wave case
rho_g_cm3 = 1
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
# At du/dt = 0, Ftot = Fd, which means that at the wave peak, the entire force is equal to the drag force
# The average of the maxima are around 0.2, so
W1_Fd = 0.2
W2_Fd = 0.018
W3_Fd = 0.35
W4_Fd = 0.07
# Then, u can be solved for using u = a*k*Cp*cos(k*x-sigma*t)
# Fd = integral(-L,0)(0.5*rho*D*Cd*u*abs(u))dz
# Fd = -h/2(0.5*rho*D*Cd*u*abs(u))
# Cd = -4*Fd/(h*rho*D*Cd*u*abs(u))
W1_Cd = -4*W1_Fd/(h_cm*rho_g_cm3*D*(W1_u)^2*cos(W1_sig*0)*abs(cos(W1_sig*0)))
W1_Cd = 2*W1_Fd/(rho_g_cm3*D*(W1_u)*abs(W1_u))
W1_Cd = 3*pi*W1_a/4*rho_g_cm3*D
W2_Cd = -4*W2_Fd/(h_cm*rho_g_cm3*D*W2_u*abs(W1_u))
W3_Cd = -4*W3_Fd/(h_cm*rho_g_cm3*D*W3_u*abs(W1_u))
W4_Cd = -4*W4_Fd/(h_cm*rho_g_cm3*D*W4_u*abs(W1_u))
g_cm = .0981 # cm^2/s
# Use root-solver function to find the k values for the different waves
W1_k = 2.3209
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
# Find u using u = g*a*k/sigma
W1_u = g_cm * W1_a * W1_k / W1_sig
W2_u = g_cm * W2_a * W2_k / W2_sig
W3_u = g_cm * W3_a * W3_k / W3_sig
W4_u = g_cm * W4_a * W4_k / W4_sig
# Find Reynolds number using Re = u*D/v
v = 1.003*10^-6
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
### 4. Find Cd and Cm for each wave case
rho_g_cm3 = 1
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
# At du/dt = 0, Ftot = Fd, which means that at the wave peak, the entire force is equal to the drag force
# The average of the maxima are around 0.2, so
W1_Fd = 0.2
W2_Fd = 0.018
W3_Fd = 0.35
W4_Fd = 0.07
# Then, u can be solved for using u = a*k*Cp*cos(k*x-sigma*t)
# Fd = integral(-L,0)(0.5*rho*D*Cd*u*abs(u))dz
# Fd = -h/2(0.5*rho*D*Cd*u*abs(u))
# Cd = -4*Fd/(h*rho*D*Cd*u*abs(u))
W1_Cd = -4*W1_Fd/(h_cm*rho_g_cm3*D*(W1_u)^2*cos(W1_sig*0)*abs(cos(W1_sig*0)))
W1_Cd = 2*W1_Fd/(rho_g_cm3*D*(W1_u)*abs(W1_u))
W1_Cd = 3*pi*W1_a/4*rho_g_cm3*D
W2_Cd = -4*W2_Fd/(h_cm*rho_g_cm3*D*W2_u*abs(W1_u))
W3_Cd = -4*W3_Fd/(h_cm*rho_g_cm3*D*W3_u*abs(W1_u))
W4_Cd = -4*W4_Fd/(h_cm*rho_g_cm3*D*W4_u*abs(W1_u))
# T = 1/freq
h_m = 0.2
W1_freq_Hz = 0.5
T12 = 2
T34 = 1
g_m = 9.81 # m/s^2
# Use root-solver function to find the k values for the different waves
W1_k = 2.3209 # 1/m
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k #m
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508 #m
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013 #m
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12 # 1/s
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# likely don't need
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
# Find u using u = g*a*k/sigma
W1_u = g_m * W1_a * W1_k / W1_sig
W2_u = g_m * W2_a * W2_k / W2_sig
W3_u = g_m * W3_a * W3_k / W3_sig
W4_u = g_m * W4_a * W4_k / W4_sig
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
rho_kg_m3 = 1000
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
# At du/dt = 0, Ftot = Fd, which means that at the wave peak, the entire force is equal to the drag force
# The average of the maxima are around 0.2, so
W1_Fd = 0.2
W2_Fd = 0.018
W3_Fd = 0.35
W4_Fd = 0.07
# Then, u can be solved for using u = a*k*Cp*cos(k*x-sigma*t)
# Fd = integral(-L,0)(0.5*rho*D*Cd*u*abs(u))dz
# Fd = -h/2(0.5*rho*D*Cd*u*abs(u))
# Cd = -4*Fd/(h*rho*D*Cd*u*abs(u))
W1_Cd = -4*W1_Fd/(h_cm*rho_g_cm3*D*(W1_u)^2*cos(W1_sig*0)*abs(cos(W1_sig*0)))
W1_Cd = 2*W1_Fd/(rho_g_cm3*D*(W1_u)*abs(W1_u))
W1_Cd = 3*pi*W1_a/4*rho_g_cm3*D
W2_Cd = -4*W2_Fd/(h_cm*rho_g_cm3*D*W2_u*abs(W1_u))
W3_Cd = -4*W3_Fd/(h_cm*rho_g_cm3*D*W3_u*abs(W1_u))
W4_Cd = -4*W4_Fd/(h_cm*rho_g_cm3*D*W4_u*abs(W1_u))
W2_Cd = -4*W2_Fd/(h_cm*rho_kg_m3*D*W2_u*abs(W1_u))
W3_Cd = -4*W3_Fd/(h_cm*rho_kg_m3*D*W3_u*abs(W1_u))
W4_Cd = -4*W4_Fd/(h_cm*rho_kg_m3*D*W4_u*abs(W1_u))
W1_Cd = 2* W1_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W1_u)^2)
W1_Cd = 2* W1_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W1_u)^2)
W2_Cd = 2* W2_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W2_u)^2)
W3_Cd = 2* W3_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W3_u)^2)
W4_Cd = 2* W4_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W4_u)^2)
library(zoo)
# Read in data for Wave 1
Lab4_W1 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W1.csv")
Lab4_W2 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W2.csv")
Lab4_W3 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W3.csv")
Lab4_W4 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W4.csv")
# Convert everything to numeric values
Lab4_W1$time_s = as.numeric(Lab4_W1$time_s)
Lab4_W1$Force_newtons = as.numeric(Lab4_W1$Force_newtons)
Lab4_W2$time_s = as.numeric(Lab4_W2$time_s)
Lab4_W2$Force_newtons = as.numeric(Lab4_W2$Force_newtons)
Lab4_W3$time_s = as.numeric(Lab4_W3$time_s)
Lab4_W3$Force_newtons = as.numeric(Lab4_W3$Force_newtons)
Lab4_W4$time_s = as.numeric(Lab4_W4$time_s)
Lab4_W4$Force_newtons = as.numeric(Lab4_W4$Force_newtons)
# Reset the time series so it starts at 0 seconds
Lab4_W1$time_s = (Lab4_W1$time_s) - (Lab4_W1$time_s[1])
Lab4_W2$time_s = (Lab4_W2$time_s) - (Lab4_W2$time_s[1])
Lab4_W3$time_s = (Lab4_W3$time_s) - (Lab4_W3$time_s[1])
Lab4_W4$time_s = (Lab4_W4$time_s) - (Lab4_W4$time_s[1])
### 1. Plot the Wave Case 1 condition of force vs. time
plot(Lab4_W1$time_s, Lab4_W1$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
plot(Lab4_W1$time_s[0:1000], Lab4_W1$Force_newtons[0:1000], ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
# Plot Wave Case 2, 3, and 4 to determine the average maxima
plot(Lab4_W2$time_s, Lab4_W2$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 2")
plot(Lab4_W3$time_s, Lab4_W3$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 3")
plot(Lab4_W4$time_s, Lab4_W4$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 4")
### 2. Calculate D/lambda for each wave case and compare with slender body assumption
# Calculate lambda using the dispersion relationship
# sigma^2 = gktanh(kh)
# T = 1/freq
h_m = 0.2
W1_freq_Hz = 0.5
T12 = 2
T34 = 1
g_m = 9.81 # m/s^2
# Use root-solver function to find the k values for the different waves
W1_k = 2.3209 # 1/m
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k #m
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508 #m
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013 #m
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12 # 1/s
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# likely don't need
# Find Cp using Cp = sigma/k
W1_Cp = W1_sig/W1_k
W2_Cp = W2_sig/W2_k
W3_Cp = W3_sig/W3_k
W4_Cp = W4_sig/W4_k
# Find u using u = g*a*k/sigma
W1_u = g_m * W1_a * W1_k / W1_sig
W2_u = g_m * W2_a * W2_k / W2_sig
W3_u = g_m * W3_a * W3_k / W3_sig
W4_u = g_m * W4_a * W4_k / W4_sig
# Find Reynolds number using Re = u*D/v
v = 10*10^-6 #m^2/s
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
### 4. Find Cd and Cm for each wave case
rho_kg_m3 = 1000
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
# At du/dt = 0, Ftot = Fd, which means that at the wave peak, the entire force is equal to the drag force
# The average of the maxima are around 0.2, so
W1_Fd = 0.2
W2_Fd = 0.018
W3_Fd = 0.35
W4_Fd = 0.07
# Cd = 2*Fd/(rho*A*u^2), from Dean and Dalrymple page 224
W1_Cd = 2* W1_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W1_u)^2)
W2_Cd = 2* W2_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W2_u)^2)
W3_Cd = 2* W3_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W3_u)^2)
W4_Cd = 2* W4_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W4_u)^2)
# At x=0, du/dt = -a*k*Cp*sin(-sigma*t)
plot(Lab4_W1$time_s[0:1000], Lab4_W1$Force_newtons[0:1000], ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
library(zoo)
# Read in data for Wave 1
Lab4_W1 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W1.csv")
Lab4_W2 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W2.csv")
Lab4_W3 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W3.csv")
Lab4_W4 <- read.csv("~/github/Coastal_Engineering/Lab 4/Lab4_W4.csv")
# add 0.019s to force transducer time signal
# Convert everything to numeric values
Lab4_W1$time_s = as.numeric(Lab4_W1$time_s)
Lab4_W1$Force_newtons = as.numeric(Lab4_W1$Force_newtons)
Lab4_W2$time_s = as.numeric(Lab4_W2$time_s)
Lab4_W2$Force_newtons = as.numeric(Lab4_W2$Force_newtons)
Lab4_W3$time_s = as.numeric(Lab4_W3$time_s)
Lab4_W3$Force_newtons = as.numeric(Lab4_W3$Force_newtons)
Lab4_W4$time_s = as.numeric(Lab4_W4$time_s)
Lab4_W4$Force_newtons = as.numeric(Lab4_W4$Force_newtons)
# Reset the time series so it starts at 0 seconds
# correction factor
cf_per1 = 0.19
Lab4_W1$time_s = (Lab4_W1$time_s) - (Lab4_W1$time_s[1])
Lab4_W2$time_s = (Lab4_W2$time_s) - (Lab4_W2$time_s[1])
Lab4_W3$time_s = (Lab4_W3$time_s) - (Lab4_W3$time_s[1]) + cf_per1
Lab4_W4$time_s = (Lab4_W4$time_s) - (Lab4_W4$time_s[1]) + cf_per1
### 1. Plot the Wave Case 1 condition of force vs. time
plot(Lab4_W1$time_s, Lab4_W1$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
plot(Lab4_W1$time_s[0:1000], Lab4_W1$Force_newtons[0:1000], ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
# Plot Wave Case 2, 3, and 4 to determine the average maxima
plot(Lab4_W2$time_s, Lab4_W2$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 2")
plot(Lab4_W3$time_s, Lab4_W3$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 3")
plot(Lab4_W4$time_s, Lab4_W4$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 4")
### 2. Calculate D/lambda for each wave case and compare with slender body assumption
# Calculate lambda using the dispersion relationship
# sigma^2 = gktanh(kh)
# T = 1/freq
h_m = 0.2
W1_freq_Hz = 0.5
T12 = 2
T34 = 1
g_m = 9.81 # m/s^2
# Use root-solver function to find the k values for the different waves
W1_k = 2.3209 # 1/m
W2_k = 2.3209
W3_k = 5.17913
W4_k = 5.17913
# lambda = 2*pi/k #m
W1_lmbda = 2*pi/W1_k
W2_lmbda = 2*pi/W2_k
W3_lmbda = 2*pi/W3_k
W4_lmbda = 2*pi/W4_k
# D/lambda to check slender body assumption
D = 0.0508 #m
W1_Dl = D/W1_lmbda
W2_Dl = D/W2_lmbda
W3_Dl = D/W3_lmbda
W4_Dl = D/W4_lmbda
### 3. Calculate the Reynolds number for each wave
W1_a = 0.013 #m
W2_a = 0.003
W3_a = 0.012
W4_a = 0.003
# Find sigma using sigma = 2*pi/T
W1_sig = 2*pi/T12 # 1/s
W2_sig = 2*pi/T12
W3_sig = 2*pi/T34
W4_sig = 2*pi/T34
# Find u using u = g*a*k/sigma
W1_u = g_m * W1_a * W1_k / W1_sig
W2_u = g_m * W2_a * W2_k / W2_sig
W3_u = g_m * W3_a * W3_k / W3_sig
W4_u = g_m * W4_a * W4_k / W4_sig
# Find Reynolds number using Re = u*D/v
v = 10*10^-6 #m^2/s
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
### 4. Find Cd and Cm for each wave case
rho_kg_m3 = 1000
# To find Cd, first find local maxima of Fd timeseries and take average to find Fd average
# At du/dt = 0, Ftot = Fd, which means that at the wave peak, the entire force is equal to the drag force
# The average of the maxima are around 0.2, so
W1_Fd = 0.2
W2_Fd = 0.018
W3_Fd = 0.35
W4_Fd = 0.07
# Cd = 2*Fd/(rho*A*u^2), from Dean and Dalrymple page 224
W1_Cd = 2* W1_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W1_u)^2)
W2_Cd = 2* W2_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W2_u)^2)
W3_Cd = 2* W3_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W3_u)^2)
W4_Cd = 2* W4_Fd/(rho_kg_m3*(pi*(D/2)^2)*(W4_u)^2)
# At x=0, du/dt = -a*k*Cp*sin(-sigma*t)
# for 1 hz wave, need the phase data, t = 0 is a crest and it is a cosine wave
plot(Lab4_W1$time_s[0:1000], Lab4_W1$Force_newtons[0:1000], ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
W1_Cd = 2* W1_Fd/(rho_kg_m3*(D*L)*(W1_u)^2)
L = 0.2 #m
W1_Cd = 2* W1_Fd/(rho_kg_m3*(D*L)*(W1_u)^2)
W2_Cd = 2* W2_Fd/(rho_kg_m3*(D*L)*(W2_u)^2)
W3_Cd = 2* W3_Fd/(rho_kg_m3*(D*L)*(W3_u)^2)
W4_Cd = 2* W4_Fd/(rho_kg_m3*(D*L)*(W4_u)^2)
v = 1*10^-6 #m^2/s
W1_Re = W1_u * D/v
W2_Re = W2_u * D/v
W3_Re = W3_u * D/v
W4_Re = W4_u * D/v
t_12 = (1/4)*T12
t_34 = (1/4)*T34
der_u = W1_a * W1_sig^2 * sin(W1_sig*t12)
der_u = W1_a * W1_sig^2 * sin(W1_sig*t_12)
der_u1 = W1_a * W1_sig^2 * sin(W1_sig*t_12)
der_u1 = W1_a * W1_sig^2 * sin(W1_sig*t_12)
der_u2 = W2_a * W2_sig^2 * sin(W2_sig*t_12)
der_u3 = W3_a * W3_sig^2 * sin(W3_sig*t_12)
der_u4 = W4_a * W4_sig^2 * sin(W4_sig*t_12)
plot(Lab4_W1$time_s, Lab4_W1$Force_newtons, ylab = "Force (N)", xlab = "Time (s)", main = "Wave Case 1")
#Ecohydrology Week 13
setwd("~/github/Ecohydrology_Modeling")
library(EcoHydRology)
# Paper used as guide: http://www.science.uwaterloo.ca/~jjgibson/mypdfs/ms_ncelakes.pdf
#Read in Soil and Met Data
VZ = read.csv('SoilWaterBalance.csv')
SH = read.csv('ShaleHills_StemXylem_Isotopes.csv')
#Step 1: Plot the local meteoric water line (LMWL)
plot(VZ$del_O,VZ$del_H) #each dot is a different rain event, the ones low on delO is winter and high is summer
#Give soils some initial isotopic composition for delO and delH
VZ$del_Soil_O[1] = -10
VZ$del_Soil_H[1] = -100
for (i in 2:nrow(VZ))
{
#Step 2: Calculate average daily temperature
VZ$Tavg_C[i] = (VZ$Tmin_C[i] + VZ$Tmax_C[i])/2
#Step 3: Evaporative fractionation and the soil water balance (following Gibson, 2002)
#Calculate alpha star
VZ$term1[i] = exp(6.7123 *((10^3)/(VZ$Tavg_C[i] + 273.15))/1000)
VZ$term2[i] = exp(0.35041*((10^9)/((VZ$Tavg_C[i] + 273.15)^3))/1000)
VZ$term3[i] = exp(7.685/1000)
VZ$term4[i] = exp(1.6664*((10^6)/((VZ$Tavg_C[i] + 273.15)^2)/1000))
VZ$alpha_star[i] = (VZ$term1[i]*VZ$term2[i])/(VZ$term3[i]*VZ$term4[i])
#Calculate estar and epsilon (Equilibrium and kinetic separation)
VZ$e_star[i] = (VZ$alpha_star[i] - 1)*1000
VZ$e_k[i] = 1.047
VZ$epsilon[i] = VZ$e_star[i] + VZ$e_k[i]
#Step 3a: Estimate atmospheric del H & O
VZ$del_a_O[i] = (VZ$del_O[i] - VZ$e_star[i])
VZ$del_a_H[i] = (VZ$del_H[i] - VZ$e_star[i])
#Step 3b: Estimate evaporation del H & O
#delE = ((alpha_star*del_soil) - (relative_humidity*del_a) - epsilon)/(1-relative_humidity+(10^-3)*epsilon_K)
VZ$del_E_O = ((VZ$alpha_star[i]*VZ$del_Soil_O[i-1]) - (VZ$RelHum[i]*VZ$del_a_O[i]) - VZ$epsilon[i])/(1-VZ$RelHum[i]+(10^(-3))*VZ$e_k[i])
VZ$del_E_H = ((VZ$alpha_star[i]*VZ$del_Soil_H[i-1]) - (VZ$RelHum[i]*VZ$del_a_H[i]) - VZ$epsilon[i])/(1-VZ$RelHum[i]+(10^(-3))*VZ$e_k[i])
#Step 3c: Use a simple complete mixing approach to calculate the soil water isotopic composition at each time step
#What are we assuming about the TWW hypothesis with this approach?
VZ$del_Soil_O[i] = VZ$del_Soil_O[i-1] + ((VZ$Precip_mm[i] - VZ$Runoff_mm[i])*(VZ$del_O[i])
- (VZ$Recharge_mm[i])*(VZ$del_Soil_O[i])
- (VZ$Evap_mm[i])*(VZ$del_E_O[i])
- (VZ$Transpiration_mm[i])*(VZ$del_Soil_O[i-1])
) / VZ$SoilWater_mm[i]
VZ$del_Soil_H[i] = VZ$del_Soil_H[i-1] + ((VZ$Precip_mm[i] - VZ$Runoff_mm[i])*(VZ$del_H[i])
- (VZ$Recharge_mm[i])*(VZ$del_Soil_H[i])
- (VZ$Evap_mm[i])*(VZ$del_E_H[i])
- (VZ$Transpiration_mm[i])*(VZ$del_Soil_H[i-1])
) / VZ$SoilWater_mm[i]
}
#Step 4: Plot Precip (All data) to establish the LMWL, overlay soils for months 9, 10, and 11
#Do soils appear isotopically different from the rainfall?
# Take a subset of soils for 9, 10 and 11
Soil_sub_del_O = VZ$del_Soil_O[VZ$Month > 8 & VZ$Month < 12]
Soil_sub_del_H = VZ$del_Soil_H[VZ$Month > 8 & VZ$Month < 12]
plot(VZ$del_O, VZ$del_H, xlab = "del 0", ylab = "del H", main = "Soil Water Isotopes in Fall")
abline(lm(VZ$del_H~VZ$del_O), col = "red")
points(Soil_sub_del_O, Soil_sub_del_H, col = "skyblue")
legend( x= "bottomright",
legend=c("LMWL", "Precipitation","Soil Water"),
col=c("red","black","skyblue"),
pch=c(20, 21, 21), cex = 0.8)
#Step 5: Overlay all measured plant xylem data with a different color for each species
#Are trees within Shale Hills CZO clearly using shallow soil water or deeper groundwater?
#Do we see a diference in water preference by species?
points(SH$del_O, SH$del_H, col = "green")
species_AS_del_O = SH$del_O[SH$Species == "AS"]
species_QR_del_O = SH$del_O[SH$Species == "QR"]
species_QP_del_O = SH$del_O[SH$Species == "QP"]
species_AS_del_H = SH$del_H[SH$Species == "AS"]
species_QR_del_H = SH$del_H[SH$Species == "QR"]
species_QP_del_H = SH$del_H[SH$Species == "QP"]
plot(VZ$del_O, VZ$del_H, xlab = "del 0", ylab = "del H", main = "Water Preference by Species")
abline(lm(VZ$del_H~VZ$del_O), col = "red")
points(species_AS_del_O, species_AS_del_H, col = "green")
points(species_QR_del_O, species_QR_del_H, col = "plum")
points(species_QP_del_O, species_QP_del_H, col = "slateblue")
legend( x= "bottomright",
legend=c("LMWL", "Precipitation","AS","QR","QP"),
col=c("red","black","green", "plum", "slateblue"),
pch=c(20, 21, 21, 21, 21), cex = 0.8)
#Step 6: Create a new plot, replot the LMWL and Soils
#Do we see a difference in tree water preference by season?
# Break up the data into 4 seasons
Fall_del_O = VZ$del_Soil_O[VZ$Month > 9]
Fall_del_H = VZ$del_Soil_H[VZ$Month > 9]
Winter_del_O = VZ$del_Soil_O[VZ$Month > 0 & VZ$Month < 4]
Winter_del_H = VZ$del_Soil_H[VZ$Month > 0 & VZ$Month < 4]
Spring_del_O = VZ$del_Soil_O[VZ$Month > 3 & VZ$Month < 7]
Spring_del_H = VZ$del_Soil_H[VZ$Month > 3 & VZ$Month < 7]
Summer_del_O = VZ$del_Soil_O[VZ$Month > 6 & VZ$Month < 10]
Summer_del_H = VZ$del_Soil_H[VZ$Month > 6 & VZ$Month < 10]
plot(VZ$del_O, VZ$del_H, xlab = "del 0", ylab = "del H", main = "Soil Water Isotopes by Season")
abline(lm(VZ$del_H~VZ$del_O), col = "red")
points(Fall_del_O, Fall_del_H, col = "sienna")
points(Winter_del_O, Winter_del_H, col = "blue")
points(Spring_del_O, Spring_del_H, col = "violetred")
points(Summer_del_O, Summer_del_H, col = "green")
legend( x= "bottomright",
legend=c("LMWL", "Precipitation","Fall","Winter","Spring","Summer"),
col=c("red","black","sienna", "blue", "violetred","green"),
pch=c(20, 21, 21, 21, 21, 21), cex = 0.8)
#Big picture question: What is controlling the local water, hydrology or ecology?
#Do trees exhibit some ability to draw from different compartments in the landscape?
#Does water availability control the distribution of trees?
plot(VZ$del_O, VZ$del_H, xlab = "del 0", ylab = "del H", main = "Water Preference by Species")
abline(lm(VZ$del_H~VZ$del_O), col = "red")
points(species_AS_del_O, species_AS_del_H, col = "green")
points(species_QR_del_O, species_QR_del_H, col = "plum")
points(species_QP_del_O, species_QP_del_H, col = "slateblue")
legend( x= "bottomright",
legend=c("LMWL", "Precipitation","AS","QR","QP"),
col=c("red","black","green", "plum", "slateblue"),
pch=c(20, 21, 21, 21, 21), cex = 0.8)
plot(VZ$del_O, VZ$del_H, xlab = "del 0", ylab = "del H", main = "Water Isotopes")
abline(lm(VZ$del_H~VZ$del_O), col = "red")
legend( x= "bottomright",
legend=c("LMWL", "Precipitation"),
col=c("red","black"),
pch=c(20, 21), cex = 0.8)
