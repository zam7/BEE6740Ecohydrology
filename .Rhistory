install.packages("EcoHydRology") # Only needs to be done once on your computer
installed.packages("xml")
installed.packages("EcoHydRology")
installed.packages("acid")
install.packages("topmodel")
setwd("~/github/Ecohydrology_Modeling/Lab 7")
setwd("~/github/BEE6740Ecohydrology")
# Load "EcoHydRology" Package
library(EcoHydRology)
#Step 1: Read in daily temperature data, convert to SI, add a date field
MetData <- read.csv("GameFarmRd_1950-present.csv")
MetData$Precip_mm = MetData$Precip*25.4
MetData$Tmax_C = 5/9*(MetData$Tmax-32)
MetData$Tmin_C = 5/9*(MetData$Tmin-32)
MetData$Date = as.Date(ISOdate(MetData$Year, MetData$Month, MetData$Day))
#Step 2: Calculate average daily temperature for each record
MetData$Tavg_C = (MetData$Tmax_C + MetData$Tmin_C)/2
#Step 3: Run snowmelt model with default parameters
lat_deg_Ith = 42.44 #decimal degrees
lat_rad_Ith<-lat_deg_Ith*pi/180 ## latitude in radians
#Step 4: Hydrologic watershed model input = precipitation as rain (mm) + snowmelt (mm)
SnowMelt = SnowMelt(MetData$Date, MetData$Precip_mm, MetData$Tmax_C, MetData$Tmin_C, lat_rad_Ith)
SnowMelt$Precip_eff_mm = SnowMelt$Rain_mm + SnowMelt$SnowMelt_mm # this takes the precip as rain and the snowmelt to find the
# effective precipitation as water on land
#Step5: Run Lumped VSA model
#?Lumped_VSA_Mmodel
Lumped_VSA_Model <- Lumped_VSA_model(dateSeries = SnowMelt$Date, 	P = SnowMelt$Precip_eff_mm,
Tmax=SnowMelt$MaxT_C, Tmin = SnowMelt$MinT_C, latitudeDegrees = lat_deg_Ith, Tp = 5.8, Depth = 2010,
SATper = 0.27, AWCper = 0.13, StartCond = "wet")
MetData <- read.csv("GameFarmRd_1950-present.csv")
MetData$Precip_mm = MetData$Precip*25.4
MetData$Tmax_C = 5/9*(MetData$Tmax-32)
MetData$Tmin_C = 5/9*(MetData$Tmin-32)
MetData$Date = as.Date(ISOdate(MetData$Year, MetData$Month, MetData$Day))
setwd("~/github/Ecohydrology_Modeling")
MetData <- read.csv("GameFarmRd_1950-present.csv")
MetData$Precip_mm = MetData$Precip*25.4
MetData$Tmax_C = 5/9*(MetData$Tmax-32)
MetData$Tmin_C = 5/9*(MetData$Tmin-32)
MetData$Date = as.Date(ISOdate(MetData$Year, MetData$Month, MetData$Day))
MetData$Tavg_C = (MetData$Tmax_C + MetData$Tmin_C)/2
#Step 3: Run snowmelt model with default parameters
lat_deg_Ith = 42.44 #decimal degrees
lat_rad_Ith<-lat_deg_Ith*pi/180 ## latitude in radians
SnowMelt = SnowMelt(MetData$Date, MetData$Precip_mm, MetData$Tmax_C, MetData$Tmin_C, lat_rad_Ith)
SnowMelt$Precip_eff_mm = SnowMelt$Rain_mm + SnowMelt$SnowMelt_mm # this takes the precip as rain and the snowmelt to find the
# effective precipitation as water on land
Lumped_VSA_Model <- Lumped_VSA_model(dateSeries = SnowMelt$Date, 	P = SnowMelt$Precip_eff_mm,
Tmax=SnowMelt$MaxT_C, Tmin = SnowMelt$MinT_C, latitudeDegrees = lat_deg_Ith, Tp = 5.8, Depth = 2010,
SATper = 0.27, AWCper = 0.13, StartCond = "wet")
View(Lumped_VSA_Model)
?Lumped_VSA_model
View(Lumped_VSA_Model)
Five_LVSAM = Lumped_VSA_Model[(365*5),]
View(Five_LVSAM)
Five_LVSAM = Lumped_VSA_Model[(1:365*5),]
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, ylab = "Soil Moisture")
lines(Five_LVSAM$Date,Five_LVSAM$Se, ylab = "Groundwater Storage (Se)")
lines(Five_LVSAM$Date,Five_LVSAM$totQ, ylab = "Discharge")
par(mfrow=c(3,1))
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, ylab = "Soil Moisture")
plot(Five_LVSAM$Date,Five_LVSAM$Se, ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, ylab = "Discharge")
par(mfrow=c(5,1))
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Discharge")
View(SnowMelt)
par(mfrow=c(5,1))
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$Precip_eff_mm[(1:(365*5)),], type = "l", ylab = "Precipitation (mm)")
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$SnowWaterEq_mm[(1:(365*5)),], type = "l", ylab = "SWE (mm)")
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture, AET")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Streamflow")
par(mfrow=c(5,1))
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$Precip_eff_mm[(1:(365*5)),], type = "l", ylab = "Precipitation (mm)")
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$SnowWaterEq_mm[(1:(365*5)),], type = "l", ylab = "SWE (mm)")
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture, AET")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Streamflow")
par(mfrow=c(1,2))
par(mar=c(0.5,0.5,0.5,0.5))
maxColorValue <- 100
palette = colorRampPalette(c("blue","red"))(maxColorValue)
plot(SnowMelt_Results$forest_cover, SnowMelt_Results$windSp_mps,
col = palette[cut(SnowMelt_Results$SnowMelt_mm, maxColorValue)],
xlab = "Forest Cover", ylab = "Wind Speed (m/s)", pch = 20, main = "Snow Melt (mm), red = high snow melt")
plot(SnowMelt_Results$forest_cover, SnowMelt_Results$windSp_mps,
col = palette[cut(SnowMelt_Results$SWE_mm, maxColorValue)],
xlab = "Forest Cover", ylab = "Wind Speed (m/s)", pch = 20, main = "SWE (mm), red = high SWE")
par(mfrow=c(5,1))
par(mar=c(0.5,0.5,0.5,0.5))
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$Precip_eff_mm[(1:(365*5)),], type = "l", ylab = "Precipitation (mm)")
plot(SnowMelt$Date[(1:(365*5)),], SnowMelt$SnowWaterEq_mm[(1:(365*5)),], type = "l", ylab = "SWE (mm)")
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture, AET")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Streamflow")
par(mfrow=c(5,1))
par(mar=c(0.5,0.5,0.5,0.5))
plot(Five_LVSAM$Date, SnowMelt$Precip_eff_mm[(1:(365*5)),], type = "l", ylab = "Precipitation (mm)")
plot(Five_LVSAM$Date, SnowMelt$SnowWaterEq_mm[(1:(365*5)),], type = "l", ylab = "SWE (mm)")
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture, AET")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Streamflow")
Five_SnowMelt = SnowMelt[(1:(365*5)),]
Five_SnowMelt = SnowMelt[(1:(365*5)),]
Five_LVSAM = Lumped_VSA_Model[(1:(365*5)),]
#Step 6: Plot 5 years of Soil Water, Groundwater Storage (Se), and Discharge
par(mfrow=c(5,1))
par(mar=c(0.5,0.5,0.5,0.5))
plot(Five_LVSAM$Date, Five_SnowMelt$Precip_eff_mm, type = "l", ylab = "Precipitation (mm)")
plot(Five_LVSAM$Date, Five_SnowMelt$SnowWaterEq_mm, type = "l", ylab = "SWE (mm)")
plot(Five_LVSAM$Date,Five_LVSAM$SoilWater, type = "l", ylab = "Soil Moisture, AET")
plot(Five_LVSAM$Date,Five_LVSAM$Se, type = "l", ylab = "Groundwater Storage (Se)")
plot(Five_LVSAM$Date,Five_LVSAM$totQ, type = "l", ylab = "Streamflow")
?SnowMelt
?Lumped_VSA_model
View(SnowMelt)
n_runs = 10
# Create random distribution of uniformly distributed of parameters
Ia_rand = runif(n_runs, min = Iamin, max = Iamax)
u_rand = runif(n_runs, min = umin, max = umax)
fc_rand = runif(n_runs, min = fcmin, max = fcmax)
Se_rand = runif(n_runs, min = Semin, max = Semax)
PI_rand = runif(n_runs, min = PImin, max = PImax)
Results = data.frame(matrix(nrow = n_runs, ncol = 0))
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(snow$Date, Precip,
snow$MaxT_C, snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$totQ_mm = max(Lumped_VSA$totQ_mm)
}
Ia_rand = runif(n_runs, min = Iamin, max = Iamax)
u_rand = runif(n_runs, min = umin, max = umax)
fc_rand = runif(n_runs, min = fcmin, max = fcmax)
Se_rand = runif(n_runs, min = Semin, max = Semax)
PI_rand = runif(n_runs, min = PImin, max = PImax)
Iamax = 0.2
Iamin = 0.05
# Forest cover (Fc) - hypothesized as sensitive
fcmax = 1
fcmin = 0
# Storage (Se) - hypothesized as sensitive
Semax = 150
Semin = 50
# Percent Impervious (PI) - hypothesized as sensitive
PImax = 50
PImin = 0
# Wind speed (u) - hypothesized as unsensitive
umax = 5 #m/s
umin = 0 #m/s
n_runs = 10
# Create random distribution of uniformly distributed of parameters
Ia_rand = runif(n_runs, min = Iamin, max = Iamax)
u_rand = runif(n_runs, min = umin, max = umax)
fc_rand = runif(n_runs, min = fcmin, max = fcmax)
Se_rand = runif(n_runs, min = Semin, max = Semax)
PI_rand = runif(n_runs, min = PImin, max = PImax)
Results = data.frame(matrix(nrow = n_runs, ncol = 0))
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(snow$Date, Precip,
snow$MaxT_C, snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$totQ_mm = max(Lumped_VSA$totQ_mm)
}
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(snow$Date, Precip_eff_mm,
snow$MaxT_C, snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$totQ_mm = max(Lumped_VSA$totQ_mm)
}
par(mfrow=c(2,3))
plot(SnowMelt_Results$Ia, Results$totQ_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(SnowMelt_Results$storage_mm, Results$totQ_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(SnowMelt_Results$PI_percent, Results$totQ_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
par(mfrow=c(2,3))
plot(Results$Ia, Results$totQ_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$totQ_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$totQ_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
par(mfrow=c(2,3))
plot(Results$Ia, Results$totQ_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$totQ_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$totQ_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
View(Results)
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(snow$Date, Precip_eff_mm,
snow$MaxT_C, snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$totQ_mm = max(Lumped_VSA$tot)
}
par(mfrow=c(2,3))
plot(Results$Ia, Results$totQ_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$totQ_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$totQ_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(snow$Date, Precip_eff_mm,
snow$MaxT_C, snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$modeled_flow_mm = max(Lumped_VSA$modeled_flow)
}
par(mfrow=c(2,3))
plot(Results$Ia, Results$modeled_flow_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$modeled_flow_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$modeled_flow_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(dateSeries = snow$Date, P = Precip_eff_mm,
Tmax = snow$MaxT_C, Tmin = snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$modeled_flow_mm[i] = max(Lumped_VSA$modeled_flow)
}
par(mfrow=c(2,3))
plot(Results$Ia, Results$modeled_flow_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$modeled_flow_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$modeled_flow_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
n_runs = 100
# Create random distribution of uniformly distributed of parameters
Ia_rand = runif(n_runs, min = Iamin, max = Iamax)
u_rand = runif(n_runs, min = umin, max = umax)
fc_rand = runif(n_runs, min = fcmin, max = fcmax)
Se_rand = runif(n_runs, min = Semin, max = Semax)
PI_rand = runif(n_runs, min = PImin, max = PImax)
Results = data.frame(matrix(nrow = n_runs, ncol = 0))
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)],
MetData$Tmin_C[1:(365*2)], lat_rad_Ith, windSp = u_rand[i], forest = fc_rand[i])
Precip_eff_mm = snow$Rain_mm + snow$SnowMelt_mm
Lumped_VSA = Lumped_VSA_model(dateSeries = snow$Date, P = Precip_eff_mm,
Tmax = snow$MaxT_C, Tmin = snow$MinT_C, latitudeDegrees = lat_deg_Ith,
Tp = 5, Depth = 2010, SATper = 0.27, AWCper = 0.13, StartCond = "wet",
Se_min = Se_rand[i], Ia_coef = Ia_rand[i], percentImpervious = PI_rand[i])
# store the randomized variables
Results$windSp_mps[i] = u_rand[i]
Results$forest_cover[i] = fc_rand[i]
Results$Ia[i] = Ia_rand[i]
Results$storage_mm[i] = Se_rand[i]
Results$PI_percent[i] = PI_rand[i]
# store desired outputs
Results$modeled_flow_mm[i] = max(Lumped_VSA$modeled_flow)
}
par(mfrow=c(2,3))
plot(Results$Ia, Results$modeled_flow_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$modeled_flow_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$modeled_flow_mm, xlab = "Percent Abstraction", ylab = "Runoff (mm)")
par(mfrow=c(2,3))
plot(Results$Ia, Results$modeled_flow_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$modeled_flow_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$modeled_flow_mm, xlab = "Percent Impervious", ylab = "Runoff (mm)")
par(mfrow=c(2,3))
plot(Results$windSp_mps, Results$modeled_flow_mm, xlab = "Wind speed (m/s)", ylab = "Runoff (mm)")
plot(Results$forest_cover, Results$modeled_flow_mm, xlab = "Forest cover", ylab = "Runoff (mm)")
plot(Results$Ia, Results$modeled_flow_mm, xlab = "Initial abstraction", ylab = "Runoff (mm)")
plot(Results$storage_mm, Results$modeled_flow_mm, xlab = "Storage", ylab = "Runoff (mm)")
plot(Results$PI_percent, Results$modeled_flow_mm, xlab = "Percent Impervious", ylab = "Runoff (mm)")
library(EcoHydRology)
library(lubridate)
library(gdata)
library(ggplot2)
setwd("~/Documents/Ecohydrology")
#Step 1: Read in daily temperature data, convert to SI, add a date field
MetData <- read.csv("GameFarmRd_1950-present.csv")
MetData$Precip_mm = MetData$Precip*25.4
MetData$Tmax_C = 5/9*(MetData$Tmax-32)
MetData$Tmin_C = 5/9*(MetData$Tmin-32)
MetData$Date = as.Date(ISOdate(MetData$Year, MetData$Month, MetData$Day))
#Step 2: Calculate average daily temperature for each record
MetData$Tavg_C = (MetData$Tmax_C + MetData$Tmin_C)/2
#Step 3: Run the Walter (2004) Snowmelt model
# Forcing Data - drives entire model to give output
#Date - Vector of dates (class Date or character) in this format: Y-m-d
#precip_mm - Vector of precipitation in mm
#Tmax_C - Vector of daily maximum temperature (degrees C)
#Tmin_C - Vector of daily minimum temperature (degrees C)
# Constants - known values, doesn't really contain uncertainty
#lat_deg - Degrees latitude
lat_deg_Ith = 42.44 #decimal degrees
lat_rad_Ith<-lat_deg_Ith*pi/180 ## latitude in radians
#slope - Overall slope of area of interest
#aspect - Aspect of the area of interest (compass direction slope faces)
#tempHt - height of temperature measurements (m)
#windHt - height of wind measurements (m)
# Model Parameters / Dimensions
#groundAlbedo - Ground Albedo, 0-1 (-)
#SurfEmissiv - Surface Emissivity, 0-1 (-)
#windSp - Wind speed - either a vector of measured values or a single value of average wind speed for the site (m/s)
#forest - Forest cover (shade) - use this only when determining snowmelt under a canopy, 0-1 (-)
# Initial Condition - can be important for short timeseries, but are unimportant for long timeseries
#startingSnowDepth_m - The depth of the snow pack initially (m)
# Run snowmelt model for hydrologic dataset
# function call is SnowMelt
SnowMelt = SnowMelt(MetData$Date, MetData$Precip_mm, MetData$Tmax_C, MetData$Tmin_C, lat_rad_Ith)
#Step 3: Plot a few years of precip, snowfall, and accumulated SWE
plot(SnowMelt$Date[0:(365*3)], SnowMelt$Precip_mm[0:(365*3)], xlab = "Date (years)", ylab = "Water Equivalent (mm)")
lines(SnowMelt$Date[0:(365*3)], SnowMelt$SnowfallWatEq_mm[0:(365*3)], col = "red")
lines(SnowMelt$Date[0:(365*3)], SnowMelt$SnowWaterEq_mm[0:(365*3)], col = "blue")
legend( x= "topright", y=0.92,
legend=c("Precipitation","Snowfall Water Equivalent","SWE"),
col=c("black","red","blue"),
pch=c(21, 21, 21))
#Step 4: How important are the different model parameters ground albedo, windSp, and forest?
#Use Monte Carlo sampling to determine if there is sensitivity to each parameter individually, and if there are higher order interactions among parameters
#Hint: run only two years of the snowmelt model, we're going to be using a lot of CPU power here and want to cut down on run time
#Try running just 10 simulations and see if the results make any sense then try running 2000 simulations
# Define the parameter range
# Albedo
amax = 0.6
amin = 0.05
# Wind speed
umax = 5 #m/s
umin = 0 #m/s
# Forest cover
fcmax = 1
fcmin = 0
n_runs = 1000
# Create random distribution of uniformly distributed of parameters
a_rand = runif(n_runs, min = amin, max = amax)
u_rand = runif(n_runs, min = umin, max = umax)
fc_rand = runif(n_runs, min = fcmin, max = fcmax)
SnowMelt_Results = data.frame(matrix(nrow = n_runs, ncol = 0))
for (i in 1:n_runs)
{
snow = SnowMelt(MetData$Date[1:(365*2)], MetData$Precip_mm[1:(365*2)], MetData$Tmax_C[1:(365*2)], MetData$Tmin_C[1:(365*2)],
lat_rad_Ith, groundAlbedo = a_rand[i], windSp = u_rand[i], forest = fc_rand[i])
SnowMelt_Results$SnowMelt_mm[i] = max(snow$SnowMelt_mm)
SnowMelt_Results$SWE_mm[i] = max(snow$SnowWaterEq_mm)
SnowMelt_Results$albedo[i] = a_rand[i]
SnowMelt_Results$windSp_mps[i] = u_rand[i]
SnowMelt_Results$forest_cover[i] = fc_rand[i]
}
#Step 5: Plot all first-order parameter sensitivity
par(mfrow=c(2,3))
plot(SnowMelt_Results$albedo, SnowMelt_Results$SnowMelt_mm, xlab = "Albedo", ylab = "Snow Melt (mm)")
plot(SnowMelt_Results$windSp_mps, SnowMelt_Results$SnowMelt_mm, xlab = "U (m/s)", ylab = "Snow Melt (mm)")
plot(SnowMelt_Results$forest_cover, SnowMelt_Results$SnowMelt_mm, xlab = "Forest Cover", ylab = "Snow Melt (mm)")
plot(SnowMelt_Results$albedo, SnowMelt_Results$SWE_mm, xlab = "Albedo", ylab = "SWE (mm)")
plot(SnowMelt_Results$windSp_mps, SnowMelt_Results$SWE_mm, xlab = "U (m/s)", ylab = "SWE (mm)")
plot(SnowMelt_Results$forest_cover, SnowMelt_Results$SWE_mm, xlab = "Forest Cover", ylab = "SWE (mm)")
